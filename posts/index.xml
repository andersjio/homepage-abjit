<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on ABJ IT</title><link>https://abjit.dk/posts/</link><description>Recent content in Blog on ABJ IT</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 01 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://abjit.dk/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>ECS on Jenkins</title><link>https://abjit.dk/posts/ecs-on-jenkins/</link><pubDate>Thu, 17 Aug 2023 09:44:39 +0200</pubDate><guid>https://abjit.dk/posts/ecs-on-jenkins/</guid><description>Motivation Researching different ways to improve stability and performance for the builds running on Jenkins , we decided to give AWS Elastic Container Service (ECS) a try.
This would enable the (re)use of Docker containers, but running on dedicated AWS hardware instead of some of on-premise infrastructure.
The setup of ECS in Jenkins was pretty straightforward following this guide and using this Jenkins plugin.
We quickly realized that adding ECS labels inside Jenkins would quickly grow to something unmanageable and at the same it had to be done by hand, because Jenkins Configuration as Code wasn&amp;rsquo;t used.</description></item><item><title>Run Jenkins on K8s</title><link>https://abjit.dk/posts/run-jenkins-on-k8s/</link><pubDate>Thu, 01 Sep 2022 16:12:08 +0200</pubDate><guid>https://abjit.dk/posts/run-jenkins-on-k8s/</guid><description>Enabling Jenkins to use k8s pods as build nodes This is the first post about how to configure Jenkins to utilize Kubernetes Pods as build slaves.
The goal of the blog post is to run a simple job, specified with a Jenkinsfile, on a dynamically created pods in Kubernetes.
prereqs. A running Jenkins A running Kubernetes cluster</description></item></channel></rss>